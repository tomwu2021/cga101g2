package com.members.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.emp.model.EmpVO;

import static connection.JDBCConnection.username;
import static connection.JDBCConnection.password;
import static connection.JDBCConnection.theURL;
import static connection.JDBCConnection.driver;

public class MembersJDBCDAO implements MembersDAO_interface {

	private static final String INSERT_STMT = 
			"INSERT INTO members(account,password,name,address,phone,rank_id,e_wallet_amount,e_wallet_password,bonus_amount,status) "
			+ "values(?,?,?,?,?,?,?,?,?,?);";
	private static final String UPDATE = 
			"UPDATE members set account=?,password=?,name=?,address=?,phone=?,rank_id=?,e_wallet_amount=?,e_wallet_password=?,bonus_amount=?,status=? "
			+ "where member_id = ?;";
	private static final String DELETE = 
			"DELETE FROM members where member_id = ?";
	private static final String GET_ALL_STMT = 
			"SELECT member_id,account,password,name,address,phone,rank_id,e_wallet_amount,e_wallet_password,bonus_amount,status,create_time FROM members order by member_id";
	private static final String GET_ONE_STMT = 
			"SELECT member_id,account,password,name,address,phone,rank_id,e_wallet_amount,e_wallet_password,bonus_amount,status,create_time FROM members where member_id = ?";

	@Override
	public void insert(MembersVO memberVO) {
		String columns[] = { "member_id" }; // autoGeneratedKeys
		try (Connection connection = DriverManager.getConnection(theURL, username, password);
				PreparedStatement ps = connection.prepareStatement(INSERT_STMT, columns)) {

			ps.setString(1, memberVO.getAccount()); // 會員帳號 string
			ps.setString(2, memberVO.getPassword()); // 會員密碼 string
			ps.setString(3, memberVO.getName()); // 會員名稱 string
			ps.setString(4, memberVO.getAddress()); // 會員地址 string
			ps.setString(5, memberVO.getPhone()); // 會員電話 string
			ps.setInt(6, memberVO.getRank_id()); // 會員等級 int
			ps.setInt(7, memberVO.getE_wallet_amount()); // 錢包餘額 int
			ps.setString(8, memberVO.getE_wallet_password()); // 錢包密碼 string
			ps.setInt(9, memberVO.getBonus_amount()); // 紅利帳戶 int
			ps.setInt(10, memberVO.getStatus()); // 帳戶狀態 int
			int rowCount = ps.executeUpdate();

			// DQL 顯示目前新增到第幾筆資料
			ResultSet rs = ps.getGeneratedKeys(); // 用 getGeneratedKeys 取得自動編號
			if (rs.next()) {
				int members_id = rs.getInt(1);
				System.out.println(rowCount + " row inserted; Employee ID: " + members_id);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	@Override
	public void update(MembersVO memberVO) {
		try (Connection connection = DriverManager.getConnection(theURL, username, password);
				PreparedStatement ps = connection.prepareStatement(UPDATE)) {

			ps.setString(1, memberVO.getAccount()); // 會員帳號 string
			ps.setString(2, memberVO.getPassword()); // 會員密碼 string
			ps.setString(3, memberVO.getName()); // 會員名稱 string
			ps.setString(4, memberVO.getAddress()); // 會員地址 string
			ps.setString(5, memberVO.getPhone()); // 會員電話 string
			ps.setInt(6, memberVO.getRank_id()); // 會員等級 int
			ps.setInt(7, memberVO.getE_wallet_amount()); // 錢包餘額 int
			ps.setString(8, memberVO.getE_wallet_password()); // 錢包密碼 string
			ps.setInt(9, memberVO.getBonus_amount()); // 紅利帳戶 int
			ps.setInt(10, memberVO.getStatus()); // 帳戶狀態 int
			ps.setInt(11, memberVO.getMember_id());
			int rowCount = ps.executeUpdate();
			System.out.println(rowCount + "row(s) updated!");
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	@Override
	public void delete(Integer member_id) {
		try (Connection connection = DriverManager.getConnection(theURL, username, password);
				PreparedStatement ps = connection.prepareStatement(DELETE)) {
			ps.setInt(1, member_id);
			int rowCount = ps.executeUpdate();
			System.out.println(rowCount + "row(s) deleted!");
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	@Override
	public MembersVO findByPrimaryKey(Integer member_id) {
		/*
		 * 	new 一個 MembersVO 來裝查詢的結果
		 * */
		MembersVO membersVO = new MembersVO();
		try (Connection connection = DriverManager.getConnection(theURL, username, password);
				PreparedStatement ps = connection.prepareStatement(GET_ONE_STMT)) {
			ps.setInt(1, member_id);
			/*
		 		當Statement關閉，ResultSet也會自動關閉， 可以不需要將ResultSet宣告置入 try with
		    */
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				membersVO.setMember_id(rs.getInt("member_id"));
				membersVO.setAccount(rs.getString("account"));
				membersVO.setPassword(rs.getString("password"));
				membersVO.setName(rs.getString("name"));
				membersVO.setAddress(rs.getString("address"));
				membersVO.setPhone(rs.getString("phone"));
				membersVO.setRank_id(rs.getInt("rank_id"));
				membersVO.setE_wallet_amount(rs.getInt("e_wallet_amount"));
				membersVO.setE_wallet_password(rs.getString("e_wallet_password"));
				membersVO.setBonus_amount(rs.getInt("bonus_amount"));
				membersVO.setStatus(rs.getInt("status"));
				membersVO.setCreate_time(rs.getTimestamp("create_time"));
			}
		} catch (SQLException e) {
			throw new RuntimeException("A database error occured. "
					+ e.getMessage());
		}
		return membersVO;
	}

	@Override
	public List<MembersVO> getAll() {
		
		List<MembersVO> list = new ArrayList<MembersVO>();
		try (Connection connection = DriverManager.getConnection(theURL, username, password);
				PreparedStatement ps = connection.prepareStatement(GET_ALL_STMT)) {
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				MembersVO membersVO = new MembersVO();
				membersVO.setMember_id(rs.getInt("member_id"));
				membersVO.setAccount(rs.getString("account"));
				membersVO.setPassword(rs.getString("password"));
				membersVO.setName(rs.getString("name"));
				membersVO.setAddress(rs.getString("address"));
				membersVO.setPhone(rs.getString("phone"));
				membersVO.setRank_id(rs.getInt("rank_id"));
				membersVO.setE_wallet_amount(rs.getInt("e_wallet_amount"));
				membersVO.setE_wallet_password(rs.getString("e_wallet_password"));
				membersVO.setBonus_amount(rs.getInt("bonus_amount"));
				membersVO.setStatus(rs.getInt("status"));
				membersVO.setCreate_time(rs.getTimestamp("create_time"));
				list.add(membersVO);
			}
		} catch (SQLException e) {
			throw new RuntimeException("A database error occured. "
					+ e.getMessage());
		}
		return list;
	}

	public static void main(String[] args) {
		/*
		 * JDBC4.0 之前載入 JDBC Driver 的方式，現在可以省略
		 */
		try {
			Class.forName(driver);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			return;
		}

		/*
		 * 建立 JDBC 物件實體
		 */
		MembersJDBCDAO dao = new MembersJDBCDAO();

		/*
		 * 建立 MembersVO1 物件實體，並呼叫 dao.insert() 方法
		 */
		MembersVO membersVO1 = new MembersVO();

//		membersVO1.setMember_id( 自動編號 int );
		membersVO1.setAccount("css@pet.com"); // 會員帳號 string
		membersVO1.setPassword("!QAZ2wsx"); // 會員密碼 string
		membersVO1.setName("筱珊"); // 會員名稱 string
		membersVO1.setAddress("台中大甲鎮瀾宮"); // 會員地址 string
		membersVO1.setPhone("0988462556"); // 會員電話 string
		membersVO1.setRank_id(4); // 會員等級 int
		membersVO1.setE_wallet_amount(645); // 錢包餘額 int
		membersVO1.setE_wallet_password("449135"); // 錢包密碼 string
		membersVO1.setBonus_amount(20); // 紅利帳戶 int
		membersVO1.setStatus(1); // 帳戶狀態 int
//		membersVO1.setCreate_time( 帳戶創建時間 );
		dao.insert(membersVO1);

		/*
		 * 建立 MembersVO2 物件實體，並呼叫 dao.update() 方法
		 */
		MembersVO membersVO2 = new MembersVO();

		membersVO2.setMember_id( 13 );
		membersVO2.setAccount("css3@pet.com"); // 會員帳號 string
		membersVO2.setPassword("!QAZ2wsx"); // 會員密碼 string
		membersVO2.setName("柏成"); // 會員名稱 string
		membersVO2.setAddress("台北市總統府"); // 會員地址 string
		membersVO2.setPhone("0988462556"); // 會員電話 string
		membersVO2.setRank_id(4); // 會員等級 int
		membersVO2.setE_wallet_amount(505); // 錢包餘額 int
		membersVO2.setE_wallet_password("666888"); // 錢包密碼 string
		membersVO2.setBonus_amount(50); // 紅利帳戶 int
		membersVO2.setStatus(1); // 帳戶狀態 int
//		membersVO1.setCreate_time( 帳戶創建時間 );
		dao.update(membersVO2);

		
		// 刪除
		dao.delete(13);
		
		
		// 查詢一筆資料
		MembersVO membersVO3 = dao.findByPrimaryKey(1);
		System.out.println("會員編號："+membersVO3.getMember_id());
		System.out.println("會員帳號："+membersVO3.getAccount()); 
		System.out.println("會員密碼："+membersVO3.getPassword()); 
		System.out.println("會員名稱："+membersVO3.getName()); 
		System.out.println("會員地址："+membersVO3.getAddress()); 
		System.out.println("會員電話："+membersVO3.getPhone()); 
		System.out.println("會員等級："+membersVO3.getRank_id()); 
		System.out.println("錢包餘額："+membersVO3.getE_wallet_amount()); 
		System.out.println("錢包密碼："+membersVO3.getE_wallet_password()); 
		System.out.println("紅利帳戶："+membersVO3.getBonus_amount()); 
		System.out.println("帳戶狀態："+membersVO3.getStatus()); 
		System.out.println("帳戶創建時間："+membersVO3.getCreate_time());

		// 查詢多筆資料
		List<MembersVO> list = dao.getAll();
		for(MembersVO aMem:list) {
			System.out.println("會員編號："+aMem.getMember_id());
			System.out.println("會員帳號："+aMem.getAccount()); 
			System.out.println("會員密碼："+aMem.getPassword()); 
			System.out.println("會員名稱："+aMem.getName()); 
			System.out.println("會員地址："+aMem.getAddress()); 
			System.out.println("會員電話："+aMem.getPhone()); 
			System.out.println("會員等級："+aMem.getRank_id()); 
			System.out.println("錢包餘額："+aMem.getE_wallet_amount()); 
			System.out.println("錢包密碼："+aMem.getE_wallet_password()); 
			System.out.println("紅利帳戶："+aMem.getBonus_amount()); 
			System.out.println("帳戶狀態："+aMem.getStatus()); 
			System.out.println("帳戶創建時間："+aMem.getCreate_time());
		}

	}

}
